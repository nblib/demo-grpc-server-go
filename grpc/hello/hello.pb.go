// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

/*
Package hello is a generated protocol buffer package.

It is generated from these files:
	hello.proto

It has these top-level messages:
	HelloRequest
	HelloReply
*/
package hello

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 客户端发送参数到服务端,服务端,返回一个message
// HelloRequest,定义一个message,作为客户端要传递的参数
type HelloRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age     int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	IsAdult bool   `protobuf:"varint,3,opt,name=isAdult" json:"isAdult,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HelloRequest) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *HelloRequest) GetIsAdult() bool {
	if m != nil {
		return m.IsAdult
	}
	return false
}

// HelloReply,服务端返回的message
type HelloReply struct {
	ReceiveTime string `protobuf:"bytes,1,opt,name=receiveTime" json:"receiveTime,omitempty"`
	Info        string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetReceiveTime() string {
	if m != nil {
		return m.ReceiveTime
	}
	return ""
}

func (m *HelloReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "hello.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "hello.HelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HelloSerivce service

type HelloSerivceClient interface {
	// 方法可以传递多个参数,和返回多个参数
	TickInfo(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type helloSerivceClient struct {
	cc *grpc.ClientConn
}

func NewHelloSerivceClient(cc *grpc.ClientConn) HelloSerivceClient {
	return &helloSerivceClient{cc}
}

func (c *helloSerivceClient) TickInfo(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/hello.HelloSerivce/tickInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HelloSerivce service

type HelloSerivceServer interface {
	// 方法可以传递多个参数,和返回多个参数
	TickInfo(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterHelloSerivceServer(s *grpc.Server, srv HelloSerivceServer) {
	s.RegisterService(&_HelloSerivce_serviceDesc, srv)
}

func _HelloSerivce_TickInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloSerivceServer).TickInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.HelloSerivce/TickInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloSerivceServer).TickInfo(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HelloSerivce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.HelloSerivce",
	HandlerType: (*HelloSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "tickInfo",
			Handler:    _HelloSerivce_TickInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4f, 0x84, 0x30,
	0x14, 0x84, 0xad, 0xeb, 0xea, 0xee, 0x5b, 0x0f, 0xfa, 0xbc, 0x34, 0x9e, 0x1a, 0x4e, 0x9c, 0x7a,
	0x58, 0x7f, 0x81, 0x3d, 0xe9, 0xc5, 0x6c, 0xaa, 0x7f, 0x00, 0xe1, 0x21, 0x8d, 0x85, 0x22, 0x14,
	0x0c, 0xff, 0xde, 0xb4, 0xa0, 0xc1, 0xdb, 0x37, 0x93, 0x66, 0x3a, 0x6f, 0xe0, 0x50, 0x91, 0xb5,
	0x4e, 0xb6, 0x9d, 0xf3, 0x0e, 0xb7, 0x51, 0x24, 0x2f, 0x70, 0xfd, 0x14, 0x40, 0xd3, 0xd7, 0x40,
	0xbd, 0x47, 0x84, 0x8b, 0x26, 0xab, 0x89, 0x33, 0xc1, 0xd2, 0xbd, 0x8e, 0x8c, 0x37, 0xb0, 0xc9,
	0x3e, 0x88, 0x9f, 0x0b, 0x96, 0x6e, 0x75, 0x40, 0xe4, 0x70, 0x65, 0xfa, 0xc7, 0x62, 0xb0, 0x9e,
	0x6f, 0x04, 0x4b, 0x77, 0xfa, 0x57, 0x26, 0x0a, 0x60, 0xc9, 0x6b, 0xed, 0x84, 0x02, 0x0e, 0x1d,
	0xe5, 0x64, 0x46, 0x7a, 0x33, 0x7f, 0xa1, 0x6b, 0x2b, 0xfc, 0x67, 0x9a, 0xd2, 0xc5, 0xf0, 0xbd,
	0x8e, 0x7c, 0x54, 0x4b, 0xa7, 0x57, 0xea, 0xcc, 0x98, 0x13, 0x1e, 0x61, 0xe7, 0x4d, 0xfe, 0xf9,
	0xdc, 0x94, 0x0e, 0xef, 0xe4, 0x7c, 0xc4, 0xba, 0xf4, 0xfd, 0xed, 0x7f, 0xb3, 0xb5, 0x93, 0x4a,
	0x00, 0x0b, 0xaa, 0x9d, 0xac, 0xe8, 0x9b, 0xa4, 0x71, 0xf3, 0x03, 0x35, 0x77, 0x3b, 0x85, 0x01,
	0x4e, 0x67, 0xef, 0x97, 0x71, 0x89, 0x87, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x47, 0x48,
	0x4a, 0x18, 0x01, 0x00, 0x00,
}
